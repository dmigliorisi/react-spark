{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { TODO_ONCHANGE, TODO_ADD, TODO_DELETE } from '../constants/actionTypes';\nexport var initialState = {\n  // this is a TODO item which has one \"value\" property\n  item: {\n    value: ''\n  },\n  // this is a list of the TODO items\n  data: []\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  // receive the type and item, which is defined in the `actions/index.ts`\n  var type = action.type,\n      item = action.item;\n\n  switch (type) {\n    case TODO_ONCHANGE:\n      {\n        // BE CAREFUL!!!\n        // DON'T USE THE REFERENCE LIKE THIS:\n        //\n        //     state.item = item;\n        //     return state; // this `state` is \"previous\" state!\n        //\n        // Please create a new instance because that is a \"next\" state\n        //\n        return _Object$assign({}, state, {\n          item: item\n        });\n      }\n\n    case TODO_ADD:\n      {\n        // if the `item.value` is empty, return the \"previous\" state (skip)\n        if (item.value === '') {\n          return state;\n        }\n\n        return _Object$assign({}, state, {\n          // clear the `item.value`\n          item: {\n            value: ''\n          },\n          // create a new array instance and push the item\n          data: [].concat(_toConsumableArray(state.data), [item])\n        });\n      }\n\n    case TODO_DELETE:\n      {\n        // don't use `state.data` directly\n        var data = state.data,\n            restState = _objectWithoutProperties(state, [\"data\"]); // `[...data]` means a new instance of the `data` array\n        // and filter them and remove the target TODO item\n\n\n        var updated = _toConsumableArray(data).filter(function (_item) {\n          return _item.value !== item.value;\n        });\n\n        return _Object$assign({}, restState, {\n          data: updated\n        });\n      }\n    // do nothing\n\n    default:\n      {\n        return state;\n      }\n  }\n});","map":{"version":3,"sources":["/Users/dmigliorisi/Code/react-spark/cli/templates/redux/reducers/todo.js"],"names":["TODO_ONCHANGE","TODO_ADD","TODO_DELETE","initialState","item","value","data","state","action","type","restState","updated","filter","_item"],"mappings":";;;AAAA,SACEA,aADF,EAEEC,QAFF,EAGEC,WAHF,QAIO,0BAJP;AAMA,OAAO,IAAMC,YAAY,GAAG;AAC1B;AACAC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE;AADH,GAFoB;AAK1B;AACAC,EAAAA,IAAI,EAAE;AANoB,CAArB;AASP,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;AAC/C;AAD+C,MAG7CC,IAH6C,GAK3CD,MAL2C,CAG7CC,IAH6C;AAAA,MAI7CL,IAJ6C,GAK3CI,MAL2C,CAI7CJ,IAJ6C;;AAO/C,UAAQK,IAAR;AACE,SAAKT,aAAL;AAAoB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAO,eAAc,EAAd,EAAkBO,KAAlB,EAAyB;AAC9BH,UAAAA,IAAI,EAAJA;AAD8B,SAAzB,CAAP;AAGD;;AAED,SAAKH,QAAL;AAAe;AACb;AACA,YAAIG,IAAI,CAACC,KAAL,KAAe,EAAnB,EAAuB;AACrB,iBAAOE,KAAP;AACD;;AAED,eAAO,eAAc,EAAd,EAAkBA,KAAlB,EAAyB;AAC9B;AACAH,UAAAA,IAAI,EAAE;AACJC,YAAAA,KAAK,EAAE;AADH,WAFwB;AAK9B;AACAC,UAAAA,IAAI,+BACEC,KAAK,CAACD,IADR,IAEFF,IAFE;AAN0B,SAAzB,CAAP;AAWD;;AAED,SAAKF,WAAL;AAAkB;AAChB;AADgB,YAERI,IAFQ,GAEeC,KAFf,CAERD,IAFQ;AAAA,YAECI,SAFD,4BAEeH,KAFf,aAIhB;AACA;;;AACA,YAAMI,OAAO,GAAG,mBAAIL,IAAJ,EAAUM,MAAV,CAAiB,UAAAC,KAAK;AAAA,iBAAIA,KAAK,CAACR,KAAN,KAAgBD,IAAI,CAACC,KAAzB;AAAA,SAAtB,CAAhB;;AAEA,eAAO,eAAc,EAAd,EAAkBK,SAAlB,EAA6B;AAClCJ,UAAAA,IAAI,EAAEK;AAD4B,SAA7B,CAAP;AAGD;AAED;;AACA;AAAS;AACP,eAAOJ,KAAP;AACD;AAlDH;AAoDD,CA3DD","sourcesContent":["import {\n  TODO_ONCHANGE,\n  TODO_ADD,\n  TODO_DELETE,\n} from '../constants/actionTypes';\n\nexport const initialState = {\n  // this is a TODO item which has one \"value\" property\n  item: {\n    value: '',\n  },\n  // this is a list of the TODO items\n  data: [],\n};\n\nexport default (state = initialState, action) => {\n  // receive the type and item, which is defined in the `actions/index.ts`\n  const {\n    type,\n    item,\n  } = action;\n\n  switch (type) {\n    case TODO_ONCHANGE: {\n      // BE CAREFUL!!!\n      // DON'T USE THE REFERENCE LIKE THIS:\n      //\n      //     state.item = item;\n      //     return state; // this `state` is \"previous\" state!\n      //\n      // Please create a new instance because that is a \"next\" state\n      //\n      return Object.assign({}, state, {\n        item,\n      });\n    }\n\n    case TODO_ADD: {\n      // if the `item.value` is empty, return the \"previous\" state (skip)\n      if (item.value === '') {\n        return state;\n      }\n\n      return Object.assign({}, state, {\n        // clear the `item.value`\n        item: {\n          value: '',\n        },\n        // create a new array instance and push the item\n        data: [\n          ...(state.data),\n          item,\n        ],\n      });\n    }\n\n    case TODO_DELETE: {\n      // don't use `state.data` directly\n      const { data, ...restState } = state;\n\n      // `[...data]` means a new instance of the `data` array\n      // and filter them and remove the target TODO item\n      const updated = [...data].filter(_item => _item.value !== item.value);\n\n      return Object.assign({}, restState, {\n        data: updated,\n      });\n    }\n\n    // do nothing\n    default: {\n      return state;\n    }\n  }\n};\n\n"]},"metadata":{},"sourceType":"module"}